;; **
;; ** Widgets config for EWW
;; ** Created by : @adi1090x
;; ** Converted by : @tripleo1
;; **

;; ** Variables ***********************************************************************

;; Profile vars
(defvar IMAGE "/home/quentin/images/profile.jpg")
(defvar NAME "Quentolosse")
(defvar UNAME "quentin@quentin-PC")

;; System vars
(defpoll CPU_USAGE :interval "1s" `sys_info --cpu`)
(defpoll MEM_USAGE :interval "1s" `sys_info --mem`)
(defpoll BLIGHT :interval "1s" `sys_info --blight`)
(defpoll BATTERY :interval "5s" `sys_info --bat`)

;; Time vars
(defpoll HOUR :interval "5s" `date +\"%H\"`)
(defpoll MIN :interval "5s" `date +\"%M\"`)
(defpoll DATE :interval "5s" `date +\"%d/%m\"`)
(defpoll DAY :interval "5s" `date +\"%A\"`)

;; Uptime vars
(defpoll UPHOUR :interval "5s" `uptime -p | awk '{print $2 \" \" $3}' | sed 's/,//g'`)
(defpoll UPMIN :interval "5s" `uptime -p | awk '{print $4 \" \" $5}'`)

;; Music vars
(defpoll SONG :interval "1s" `music_info --song`)
(defpoll ARTIST :interval "1s" `music_info --artist`)
(defpoll STATUS :interval "1s" `music_info --status`)
(defpoll CURRENT :interval "1s" `music_info --time`)
(defpoll CTIME :interval "1s" `music_info --ctime`)
(defpoll TTIME :interval "1s" `music_info --ttime`)
;; (deflisten BARS :initial "salut"
  ;; `python3 /home/quentin/code/python-all/cava_2.py`)

;; Weather vars
(defpoll DATA :interval "15m" `weather_info --getdata`)
(defpoll ICON :interval "15m" `weather_info --icon`)
(defpoll STAT :interval "15m" `weather_info --stat`)
(defpoll TEMP :interval "15m" `weather_info --temp`)
(defpoll HEX :interval "15m" `weather_info --hex`)
(defpoll WQUOTE :interval "15m" `weather_info --quote`)
(defpoll QUOTE2 :interval "15m" `weather_info --quote2`)

;; Files vars
(defpoll FREE :interval "5s" `df -h / | awk '{print $4}' | tail -n 1 | sed 's/G/GB/'`)

;; Quote vars
(defpoll AUTHOR-QUOTE :interval "10m"  "cat /tmp/quotes/author")
(defpoll QUOTE :interval "10m"  "cat /tmp/quotes/quote")
(defpoll QUOTE-GEN :interval "30m" "quotes")

;; Connections vars
(defpoll WIFI :interval "5s" `nmcli | grep connected| head -n1| awk {'print($4)'}`)

;; ** Widgets *************************************************************************


;; background
(defwidget bg [] 
	(box :class "bg")
)

;; profile
(defwidget user [] 
	(box :class "genwin" :orientation "v" :spacing 35 :space-evenly "false" :vexpand "false" :hexpand "false"
		(box :style "background-image: url('${IMAGE}');" :class "face" :halign "center")
		(label :class "fullname" :halign "center" :wrap "true" :limit-width 25 :text NAME)
		(label :class "username" :halign "center" :wrap "true" :limit-width 25 :text UNAME)))

;; system
(defwidget system [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(box :orientation "v" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :class "cpu_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconcpu" :text "󱤓")
				(scale :min 0 :max 100 :value CPU_USAGE :active "false"))
			(box :class "mem_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconmem" :text "")
				(scale :min 0 :max 100 :value MEM_USAGE :active "false"))
			(box :class "bright_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconbright" :text "󰖨")
				(scale :min 0 :max 100 :value BLIGHT :active "false"))
			(box :class "bat_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconbat" :text "")
				(scale :min 0 :max 100 :value BATTERY :active "false")))))

;; clock
(defwidget clock [] 
	(box :class "genwin" :orientation "h" :spacing 50 :space-evenly false :vexpand "false" :hexpand "false" 
		(box :orientation "h" :spacing 0
			(label :class "time_hour" :valign "start" :wrap "true" :limit-width 25 :text HOUR)
			(label :class "time_min" :valign "end" :wrap "true" :limit-width 25 :text MIN))
		(box :orientation "v" :spacing 0 
			(label :class "time_mer" :valign "start" :halign "end" :wrap "true" :limit-width 25 :text DATE)
			(label :class "time_day" :valign "end" :halign "end" :wrap "true" :limit-width 25 :text DAY))))

;; uptime
(defwidget uptime [] 
	(box :class "genwin" 
		(box :orientation "h" :halign "center" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :class "icontimer" :valign "center" :text "󱎫")
			(box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "uphour" :halign "start" :wrap "true" :limit-width 25 :text UPHOUR)
				(label :class "upmin" :halign "start" :wrap "true" :limit-width 25 :text UPMIN)))))

;; Music
(defwidget music [] 
	(box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(label :halign "center" :class "song" :wrap "true" :limit-width 18 :text SONG)
		(label :halign "center" :class "artist" :wrap "true" :limit-width 17 :text ARTIST)
		(box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false" 
			(button :class "btn_prev" :onclick "music_info --prev" "󰒮")
			(button :class "btn_play" :onclick "music_info --toggle" STATUS)
			(button :class "btn_next" :onclick "music_info --next" "󰒭"))
		(box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" 
			(scale :min 0 :active "false" :max 100 :value CURRENT))))

;; weather
(defwidget weather [] 
	(box :class "genwin" 
		(box :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :orientation "h" :vexpand "false" :hexpand "false" 
				(label :class "iconweather" :halign "start" :style "color: ${HEX};" :text ICON)
				(label :class "label_temp" :halign "end" :text TEMP))
			(box :orientation "v" :spacing 10 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "label_stat" :text STAT)
				(label :class "label_quote" :text WQUOTE)
				(label :class "label_quote" :text QUOTE2)))))

;; apps
(defwidget apps [] 
	(box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :style "background-image: url('images/firefox.png');" :class "app_fox" :onclick "open-app --ff")
			(button :style "background-image: url('images/icons/telegram.svg');" :class "app_telegram" :onclick "scripts/open_apps --tg")
			(button :style "background-image: url('images/discord.svg');" :class "app_discord" :onclick "open-app --dc"))
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :style "background-image: url('images/icons/terminal.svg');" :class "app_terminal" :onclick "scripts/open_apps --tr")
			(button :style "background-image: url('images/icons/files.svg');" :class "app_files" :onclick "scripts/open_apps --fm")
			(button :style "background-image: url('images/icons/geany.svg');" :class "app_geany" :onclick "scripts/open_apps --ge"))
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :style "background-image: url('images/code.png');" :class "app_code" :onclick "open-app --cd")
			(button :style "background-image: url('images/icons/gimp.svg');" :class "app_gimp" :onclick "scripts/open_apps --gp")
			(button :style "background-image: url('images/icons/virtualbox.svg');" :class "app_vbox" :onclick "scripts/open_apps --vb"))))

;; power buttons
(defwidget logout [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_logout" :onclick "/home/quentin/tmp" "󰍃")))
(defwidget sleep [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_sleep" :onclick "systemctl suspend" "
")))
(defwidget reboot [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_reboot" :onclick "systemctl reboot" "󰑐")))
(defwidget poweroff [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_poweroff" :onclick "systemctl poweroff" "󰐥")))

;; folders
(defwidget folders [] 
	(box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"

		(box :class "hddbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :space-evenly "false" :vexpand "false" :hexpand "false"		
				(button :class "hddicon" :onclick "scripts/open_apps --fm" "󰋊")
				(label :class "fs_sep" :text "|"))
			(box :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "hdd_label" :wrap "true" :limit-width 25 :text FREE)))
		(box :class "hddbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
			(box :space-evenly "false" :vexpand "false" :hexpand "false"
                                (button :class "wifiicon" :onclick "scripts/open_apps --fm" "󰤨")
                                (label :class "fs_sep" :text "|"))
                        (box :space-evenly "false" :vexpand "false" :hexpand "false"
                                (label :class "wifi_label" :wrap "true" :limit-width 25 :text WIFI)))))

;; quote
(defwidget quote [] 
      (centerbox :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
        (label :class "quote-main" :halign "start" :text QUOTE :wrap "true")
	(literal :content "")
	(label :class "quote-author" :text AUTHOR-QUOTE :halign "end" :valign "end")))


;; ** Windows *************************************************************************


;; background
(defwindow background :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 0 :y 0 :width "1920px" :height "1080px")
					(bg))

;; profile
(defwindow profile :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 150 :y 150 :width 350 :height 440)
					(user))

;; system
(defwindow system :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 150 :y 605 :width 350 :height 325)
					(system))

;; clock
(defwindow clock :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 515 :y 150 :width 375 :height 155)
					(clock))

;; uptime
(defwindow uptime :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 515 :y 320 :width 375 :height 155)
					(uptime))

;; music
(defwindow music :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 515 :y 490 :width 375 :height 225)
					(music))

;; weather
(defwindow weather :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 905 :y 150 :width 525 :height 325)
					(weather))

;; apps
(defwindow apps :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1140 :y 490 :width 290 :height 280)
					(apps))

;; logout
(defwindow logout :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1445 :y 150 :width 155 :height 155)
					(logout))

;; sleep
(defwindow sleep :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1615 :y 150 :width 155 :height 155)
					(sleep))

;; reboot
(defwindow reboot :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1445 :y 320 :width 155 :height 155)
					(reboot))

;; poweroff
(defwindow poweroff :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1615 :y 320 :width 155 :height 155)
					(poweroff))

;; folders
(defwindow folders :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1445 :y 490 :width 295 :height 130)
					(folders))

;; quote
(defwindow quote :stacking "fg" :focusable "false" :screen 1
	     :geometry (geometry :x 515 :y 730 :width 595 :height 200)
                                        (quote))

