(defwidget sep []
  (box :class "module-2" :vexpand "false" :hexpand "false"
    (label :class "separ" :text "|")))


;; Internet widget
(defpoll COL_WLAN :interval "5s" "./scripts/wifi color")
(defpoll ESSID_WLAN :interval "5s" "./scripts/wifi name")
(defpoll WLAN_ICON :interval "5s" "./scripts/wifi icon")
(defwidget internet [] 
  (box :class "internet_class" :vexpand "false" :hexpand "false" :space-evenly "false"
    (button
      :tooltip "${ESSID_WLAN}"
      :wrap "false" 
      :limit-width 12 
      :style "color: ${COL_WLAN};"
      :onclick "st -e nmtui &"
      WLAN_ICON
    )
  )
)

;; Clock widget
(defpoll clock_time :interval "1s" "date +\%H:%M")
(defpoll clock_date :interval "1h" "date '+%a %d/%m'")
(defvar date_rev_0 false)
(defvar date_rev_1 false)

(defwidget clock [screen]
  (eventbox :onhover "eww update date_rev_${screen}=true"
            :onhoverlost "eww update date_rev_${screen}=false"
    (box :class "clock_class" :space-evenly "false" :orientation "h" :spacing "3" 
      (button :class "clock_time_class" :onclick "st -e tclock &" clock_time)
      (revealer 
        :transition "slideleft"
        :reveal {screen==0 ? date_rev_0 : date_rev_1}
        :duration "550ms"
        (button :class "clock_date_class" :onclick "./scripts/popup_calendar ${screen}" clock_date)
      )
    )
  )
)

;; Calendar widget
(defpoll calendar_day :interval "10h" "date '+%d'")
(defpoll calendar_month :interval "10h" "date +%m")
(defpoll calendar_year :interval "10h" "date '+%Y'")
(defwidget cal []
  (box :class "cal-box" 
    :orientation "v"
    (box :class "cal-inner-box"
      (calendar :class "cal" 
        :day calendar_day 
        :month calendar_month
        :year calendar_year
      )
    )
  )
)

;; Calendar window
(defwindow calendar [screen]
  :class "calendar_class"
  :monitor screen
  :geometry (geometry
    :x "-25px"
    :y "75px"
    :width "250px"
    :height "60px"
    :anchor "top right")
  (cal)
)

;; Battery widget
(defwidget bat []
  
  (box 
    :class {EWW_BATTERY.BAT0.status == "Charging" ? "batcolor-charging" :
            EWW_BATTERY.BAT0.capacity < 20 ? "batcolor-20" :
            EWW_BATTERY.BAT0.capacity < 40 ? "batcolor-40" :
            EWW_BATTERY.BAT0.capacity < 60 ? "batcolor-60" :
            EWW_BATTERY.BAT0.capacity < 80 ? "batcolor-80" :
            "batcolor-100"} 
    :vexpand "false" :hexpand "false" 
    (button :class "iconbat"
      :tooltip "${EWW_BATTERY.BAT0.status} ${EWW_BATTERY.BAT0.capacity}%"
      :show_truncated false
      :onclick "./scripts/pop system"
      :wrap false
      {EWW_BATTERY.BAT0.status == "Charging" ? "󰂄" :
      EWW_BATTERY.BAT0.capacity < 20 ? "󰂃" :
      EWW_BATTERY.BAT0.capacity < 40 ? "󰁼" :
      EWW_BATTERY.BAT0.capacity < 60 ? "󰁾" :
      EWW_BATTERY.BAT0.capacity < 80 ? "󰂀" :
      "󰁹"})))

;; Volume widget
(defpoll volume_percent :interval "1s" "pulsemixer --get-volume | awk '{ print $1 }'")
(defpoll volume-muted :interval "1s" "pulsemixer --get-mute")
(defvar vol_reveal_0 false)
(defvar vol_reveal_1 false)
(defwidget volume [screen]
  (eventbox :onhover "eww update vol_reveal_${screen}=true"
            :onhoverlost "eww update vol_reveal_${screen}=false"
  (box :class "volume_class" :space-evenly "false" :orientation "h" :spacing "20" 
    (button :onclick "pulsemixer --toggle-mute"
      :onmiddleclick "st -e pulsemixer &"
      :class 'volume-icon ${volume-muted==1 ? "volume-icon-muted" : ""}'
      {volume-muted==1      ? "󰝟" :
       volume_percent == 0  ? "" :
       volume_percent <= 50 ? "" :
                              ""}
        
    )
    (revealer 
      :transition "slideleft"
      :reveal { screen == 0 ? vol_reveal_0 : vol_reveal_1 }
      :duration "350ms"
      (scale  :class "volbar"
        :value volume_percent
        :orientation "h"
        :tooltip "${volume_percent}%"
        :max 100
        :min 0
        :onchange "pulsemixer --set-volume {}" )))))


  (defpoll brightness_percent :interval "1s" "brightnessctl --machine-readable | awk '{split($0,a,\",\"); print substr(a[4], 1, length(a[4])-1)}'")
  (defvar bri_reveal_0 false)
  (defvar bri_reveal_1 false)
  (defwidget brightness [screen]
    (eventbox :onhover "eww update bri_reveal_${screen}=true"
              :onhoverlost "eww update bri_reveal_${screen}=false"
    (box :class "brightness_class" :space-evenly "false" :orientation "h" :spacing "20" 
      (label
        :class "brightness-icon" 
        :text "󰃠"
      )
      (revealer 
        :transition "slideleft"
        :reveal { screen == 0 ? bri_reveal_0 : bri_reveal_1 }
        :duration "350ms"
        (scale  :class "bribar"
          :value brightness_percent
          :orientation "h"
          :tooltip "${brightness_percent}%"
          :max 100
          :min 0
          :onchange "brightnessctl s {}%" )))))
    

(defwidget right [screen]
  (box
    :orientation "h" 
    :halign "end"
    :space-evenly false  
    (sep)
    (brightness :screen screen)
    (volume :screen screen) 
;;    (sep)
    (bat)
    (internet)
    (sep)
    (clock :screen screen)
      
  )
)

;; Workspace widget
(deflisten tags_listen_0 :initial "" `./scripts/bar_0/dwm-tags`)
(deflisten tags_listen_1 :initial "" `./scripts/bar_1/dwm-tags`)

(defwidget tags [screen]
  (literal :content {screen == 0 ? tags_listen_0 : tags_listen_1 })
)

(defwidget left [screen]
  (box
    :orientation "h" 
    :halign "start"
    :space-evenly false  
    (tags :screen screen)
  )
)

(defwidget mainbar [screen]
  (box
    :class "bar_class"
    :orientation "h"
    (left :screen screen)
    (right :screen screen)
  )
)

(defwindow bar [screen]
  :class "bar"
  :monitor screen
  :geometry (geometry
    :x "0%"
    :y "20px"
    :width "1870px"
    :height "50px"
    :anchor "top center")
  :stacking "fg"
  :reserve (struts :distance "40px" :side "top")
  :windowtype "dock"
  :wm-ignore false
  (mainbar :screen screen)
)
